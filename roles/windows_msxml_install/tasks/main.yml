---
# tasks file for windows_msxml_install
- name: Create PowerShell script for MSXML check
  win_copy:
    content: |
      $CleanVersion = "{{ msxml_version }}".Split('.')[0]
      $msxmlPaths = @(
        "$env:SystemRoot\System32\msxml$CleanVersion.dll",
        "$env:SystemRoot\SysWOW64\msxml$CleanVersion.dll"
      )
      $msxmlFound = $false
      $foundPaths = @()
      
      # Create HKCR drive if it doesn't exist
      if (-not (Get-PSDrive -Name HKCR -ErrorAction SilentlyContinue)) {
        New-PSDrive -PSProvider Registry -Root HKEY_CLASSES_ROOT -Name HKCR -ErrorAction SilentlyContinue | Out-Null
      }
      
      # Check registry
      $msxmlClsidPath = "HKCR:\CLSID\{2933BF90-7B36-11D2-B20E-00C04F983E60}\VersionList"
      if (Test-Path $msxmlClsidPath) {
        $versionEntries = Get-Item $msxmlClsidPath | Get-ChildItem | Where-Object { $_.PSChildName -like "{{ msxml_version }}*" }
        if ($versionEntries) {
          $msxmlFound = $true
          foreach ($entry in $versionEntries) {
            $properties = $entry | Get-ItemProperty
            $dllPath = $properties.'(default)' -replace '"', ''
            if (Test-Path $dllPath) {
              $foundPaths += $dllPath
            }
          }
        }
      }
      
      # Check standard locations
      foreach ($path in $msxmlPaths) {
        if (Test-Path $path) {
          $msxmlFound = $true
          $foundPaths += $path
        }
      }
      
      # Output results as JSON for Ansible to parse
      $result = @{
        msxml_found = $msxmlFound
        found_paths = $foundPaths
      }
      
      ConvertTo-Json -InputObject $result
    dest: C:\Windows\Temp\check_msxml_install.ps1
  
- name: Check if specified MSXML version already exists
  win_shell: C:\Windows\Temp\check_msxml_install.ps1
  register: msxml_check_result

- name: Set MSXML facts from check result
  set_fact:
    msxml_found: "{{ (msxml_check_result.stdout | from_json).msxml_found }}"
    msxml_paths: "{{ (msxml_check_result.stdout | from_json).found_paths }}"

- name: Display MSXML status
  debug:
    msg: "MSXML {{ msxml_version }} is {{ msxml_found | ternary('already installed', 'not installed') }}{{ msxml_found | ternary(' at: ' + msxml_paths | join(', '), '') }}"

- name: Create PowerShell script for MSXML download and installation
  win_copy:
    content: |
      # Define download URLs for different MSXML versions
      $msxmlDownloads = @{
        "3" = @{
          "x86" = "https://download.microsoft.com/download/8/8/8/888f34b7-4f54-4f06-8dac-fa29b19f33dd/msxml3.msi";
          "x64" = "https://download.microsoft.com/download/8/8/8/888f34b7-4f54-4f06-8dac-fa29b19f33dd/msxml3.msi"; # Same file for both architectures
          "Description" = "Microsoft XML Parser (MSXML) 3.0";
        };
        "4" = @{
          "x86" = "https://download.microsoft.com/download/A/2/D/A2D8587D-0027-4217-9DAD-38AFDB0A177E/msxml.msi";
          "x64" = "https://download.microsoft.com/download/A/2/D/A2D8587D-0027-4217-9DAD-38AFDB0A177E/msxml.msi"; # Same file for both architectures
          "Description" = "Microsoft XML Core Services (MSXML) 4.0 SP2";
        };
        "6" = @{
          "x86" = "https://download.microsoft.com/download/e/2/e/e2e92e52-210b-4774-8cd9-3a15db08b3ac/msxml6_x86.msi";
          "x64" = "https://download.microsoft.com/download/e/2/e/e2e92e52-210b-4774-8cd9-3a15db08b3ac/msxml6_x64.msi";
          "Description" = "Microsoft XML Core Services (MSXML) 6.0";
        };
      }

      # Clean up version input (remove decimals if present)
      $CleanVersion = "{{ msxml_version }}".Split('.')[0]
      
      # Check if download info exists for the requested version
      if (-not $msxmlDownloads.ContainsKey($CleanVersion)) {
        Write-Output "{'success': false, 'error': 'No download information available for MSXML version {{ msxml_version }}. Supported versions: 3.0, 4.0, 6.0'}"
        exit 1
      }
      
      $versionInfo = $msxmlDownloads[$CleanVersion]
      
      # Determine system architecture
      $architecture = "x86"
      if ([Environment]::Is64BitOperatingSystem) {
        $architecture = "x64"
      }
      
      $downloadUrl = $versionInfo[$architecture]
      $description = $versionInfo["Description"]
      
      Write-Output "{'status': 'downloading', 'version': '{{ msxml_version }}', 'url': '$downloadUrl', 'architecture': '$architecture'}"
      
      # Create temporary directory
      $tempDir = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), "MSXML_Install_$CleanVersion")
      if (-not (Test-Path $tempDir)) {
        New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
      }
      
      # Download the installer
      $installerPath = [System.IO.Path]::Combine($tempDir, "msxml$CleanVersion.msi")
      
      try {
        # Create a webclient for the download
        $webClient = New-Object System.Net.WebClient
        $webClient.Headers.Add("User-Agent", "PowerShell Script")
        $webClient.DownloadFile($downloadUrl, $installerPath)
        
        Write-Output "{'status': 'installing', 'installer_path': '$installerPath'}"
        
        # Install the MSI package
        $process = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$installerPath`" /qn" -Wait -PassThru -NoNewWindow
        
        if ($process.ExitCode -eq 0 -or $process.ExitCode -eq 3010) {
          # 0 = success, 3010 = success but reboot required
          $success = $true
          $rebootRequired = ($process.ExitCode -eq 3010)
        }
        else {
          $success = $false
        }
        
        # Output results as JSON for Ansible to parse
        $result = @{
          success = $success
          exit_code = $process.ExitCode
          reboot_required = $rebootRequired
          version = "{{ msxml_version }}"
          description = $description
          installer_path = $installerPath
        }
        
        ConvertTo-Json -InputObject $result
      }
      catch {
        $errorMessage = $_.Exception.Message -replace '"', '\"'
        Write-Output "{""success"": false, ""error"": ""$errorMessage""}"
        exit 1
      }
      finally {
        # Clean up temporary files if requested
        if ($true -eq {{ cleanup_temp_files | default(true) | bool | lower }}) {
          if (Test-Path $installerPath) {
            Remove-Item -Path $installerPath -Force
          }
          if (Test-Path $tempDir) {
            Remove-Item -Path $tempDir -Force -Recurse
          }
        }
      }
    dest: C:\Windows\Temp\install_msxml.ps1
  when: not msxml_found or msxml_reinstall | default(false) | bool

- name: Install MSXML if not found or reinstall is requested
  win_shell: C:\Windows\Temp\install_msxml.ps1
  register: msxml_install_result
  when: not msxml_found or msxml_reinstall | default(false) | bool

- name: Parse installation result
  set_fact:
    install_success: "{{ msxml_install_result.stdout | from_json | json_query('success') }}"
    reboot_required: "{{ msxml_install_result.stdout | from_json | json_query('reboot_required') | default(false) }}"
  when: not msxml_found or msxml_reinstall | default(false) | bool

- name: Display installation results
  debug:
    msg: >-
      MSXML {{ msxml_version }} installation {{ install_success | ternary('completed successfully', 'failed') }}.
      {{ reboot_required | ternary('System reboot is required to complete the installation.', '') }}
  when: not msxml_found or msxml_reinstall | default(false) | bool

- name: Set reboot flag if required
  set_fact:
    msxml_reboot_required: "{{ reboot_required }}"
  when: (not msxml_found or msxml_reinstall | default(false) | bool) and reboot_required | default(false) | bool

- name: Verify installation after completion
  win_shell: C:\Windows\Temp\check_msxml_install.ps1
  register: msxml_verify_result
  when: not msxml_found or msxml_reinstall | default(false) | bool

- name: Display verification results
  debug:
    msg: >-
      Verification: MSXML {{ msxml_version }} is 
      {{ (msxml_verify_result.stdout | from_json).msxml_found | ternary('now installed', 'still not detected') }}
  when: not msxml_found or msxml_reinstall | default(false) | bool

# Cleanup temporary scripts
- name: Remove temporary PowerShell scripts
  win_file:
    path: "{{ item }}"
    state: absent
  loop:
    - C:\Windows\Temp\check_msxml_install.ps1
    - C:\Windows\Temp\install_msxml.ps1
  when: cleanup_temp_files | default(true) | bool
  ignore_errors: yes

# Reboot the system if required and allowed
- name: Reboot system if required after MSXML installation
  win_reboot:
    msg: "Reboot required to complete MSXML {{ msxml_version }} installation"
    pre_reboot_delay: 15
    post_reboot_delay: 30
    reboot_timeout: 600
  when: msxml_reboot_required | default(false) | bool and allow_reboot | default(false) | bool
