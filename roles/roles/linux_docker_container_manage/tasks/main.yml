---
# tasks file for linux_docker_container_manage
- name: Vérifier si Docker est installé
  ansible.builtin.shell: "which docker"
  register: docker_installed
  ignore_errors: yes
  changed_when: false

- name: Stop playbook si Docker n'est pas installé
  fail:
    msg: "Docker n'est pas installé. Veuillez exécuter le rôle 'install_docker' avant de relancer ce playbook."
  when: docker_installed.rc != 0

- name: Afficher les images Docker à traiter
  debug:
    msg: "{{ docker_images }}"

- name: Vérifier si l'image Docker est présente
  ansible.builtin.shell: "docker images -q {{ item.name }}"
  register: image_exists
  with_items: "{{ docker_images }}"
  ignore_errors: yes

- name: Télécharger l'image si elle est absente
  ansible.builtin.shell: "docker pull {{ item.item.name }}"
  when: item.stdout == ""
  with_items: "{{ image_exists.results }}"

- name: Vérifier si le conteneur est en cours d'exécution
  ansible.builtin.shell: "docker ps | grep {{ item.container_name }}"
  register: running_container
  with_items: "{{ docker_images }}"
  changed_when: false
  failed_when: running_container.rc not in [0, 1]  # ✅ Ignore erreur si rc=1
  ignore_errors: yes

- name: Vérifier si le conteneur existe (arrêté ou en cours)
  ansible.builtin.shell: "docker ps -a | grep {{ item.container_name }}"
  register: existing_container
  with_items: "{{ docker_images }}"
  changed_when: false
  failed_when: existing_container.rc not in [0, 1]  # ✅ Ignore erreur si rc=1
  ignore_errors: yes

- name: Afficher le statut des conteneurs existants
  debug:
    msg: "{{ existing_container }}"

- name: Démarrer le conteneur s'il est arrêté
  ansible.builtin.shell: "docker start {{ item.container_name }}"
  when: "'item.container_name' in existing_container and 'item.container_name' not in running_container"
  with_items: "{{ docker_images }}"

- name: Lancer le conteneur si absent
  ansible.builtin.shell: "{{ item.docker_run_var }}"
  when: "'item.container_name' not in existing_container"
  with_items: "{{ docker_images }}"
