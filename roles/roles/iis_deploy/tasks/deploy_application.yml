---
- name: "Arrêter le pool d'applications avant le déploiement"
  win_shell: |
    Import-Module WebAdministration
    if((Get-WebAppPoolState -Name "{{ iis_deploy_app_pool_name }}").Value -eq "Started") {
        Stop-WebAppPool -Name "{{ iis_deploy_app_pool_name }}"
    }
  ignore_errors: yes

- name: "Nettoyer le répertoire cible si nécessaire"
  win_file:
    path: "{{ iis_deploy_physical_path }}"
    state: absent
  when: iis_deploy_clean_before_deploy | bool

- name: "Recréer le répertoire physique"
  win_file:
    path: "{{ iis_deploy_physical_path }}"
    state: directory
  when: iis_deploy_clean_before_deploy | bool

- name: "Extraire l'artefact dans le répertoire cible"
  win_unzip:
    src: "{{ ansible_env.TEMP }}\\{{ iis_deploy_app_name }}\\{{ iis_deploy_app_name }}-{{ iis_deploy_actual_version }}.zip"
    dest: "{{ iis_deploy_physical_path }}"
    delete_archive: no
    recurse: yes

- name: "Appliquer les transformations Web.config si nécessaire"
  win_shell: |
    Import-Module WebAdministration
    $webConfigPath = "{{ iis_deploy_physical_path }}\Web.config"
    $transformPath = "{{ iis_deploy_physical_path }}\Web.{{ iis_deploy_app_environment }}.config"
    
    if(Test-Path $transformPath) {
        # Utiliser Microsoft.Web.XmlTransform pour appliquer la transformation
        Add-Type -Path "C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\Web\Microsoft.Web.XmlTransform.dll"
        $xmlDoc = New-Object Microsoft.Web.XmlTransform.XmlTransformableDocument
        $xmlDoc.Load($webConfigPath)
        $xmlTransform = New-Object Microsoft.Web.XmlTransform.XmlTransformation($transformPath)
        if($xmlTransform.Apply($xmlDoc)) {
            $xmlDoc.Save($webConfigPath)
        }
    }
  when: iis_deploy_web_config_transform | bool
  ignore_errors: yes

- name: "Générer le fichier Web.config à partir du template si nécessaire"
  win_template:
    src: web.config.j2
    dest: "{{ iis_deploy_physical_path }}\\web.config"
    backup: yes
  when: not iis_deploy_web_config_transform | bool

- name: "Démarrer le pool d'applications"
  win_shell: |
    Import-Module WebAdministration
    Start-WebAppPool -Name "{{ iis_deploy_app_pool_name }}"

- name: "Valider le déploiement"
  win_uri:
    url: "http://localhost{{ iis_deploy_app_path }}"
    method: GET
    status_code: 200, 302, 401  # Codes de statut valides
  register: deployment_validation
  ignore_errors: yes
  when: iis_deploy_app_path != "/"

- name: "Nettoyer les anciennes versions"
  win_shell: |
    $versionsDirectory = "{{ ansible_env.TEMP }}\\{{ iis_deploy_app_name }}"
    $files = Get-ChildItem -Path $versionsDirectory -Filter "{{ iis_deploy_app_name }}-*.zip" | Sort-Object LastWriteTime -Descending
    if($files.Count -gt {{ iis_deploy_keep_versions }}) {
        $filesToDelete = $files | Select-Object -Skip {{ iis_deploy_keep_versions }}
        foreach($file in $filesToDelete) {
            Remove-Item $file.FullName -Force
        }
    }
  when: iis_deploy_keep_versions > 0
  ignore_errors: yes

- name: "Afficher les résultats du déploiement"
  debug:
    msg: |
      Application {{ iis_deploy_app_name }} version {{ iis_deploy_actual_version }} déployée avec succès.
      URL: http://{{ ansible_host }}{{ iis_deploy_app_path }}
      Pool d'applications: {{ iis_deploy_app_pool_name }}
      Répertoire physique: {{ iis_deploy_physical_path }}