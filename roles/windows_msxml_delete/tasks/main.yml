- name: Create PowerShell script for MSXML check
  win_copy:
    content: |
      $CleanVersion = "{{ msxml_version }}".Split('.')[0]
      $msxmlPaths = @(
        "$env:SystemRoot\System32\msxml$CleanVersion.dll",
        "$env:SystemRoot\SysWOW64\msxml$CleanVersion.dll"
      )
      $msxmlFound = $false
      $foundPaths = @()
      
      # Create HKCR drive if it doesn't exist
      if (-not (Get-PSDrive -Name HKCR -ErrorAction SilentlyContinue)) {
        New-PSDrive -PSProvider Registry -Root HKEY_CLASSES_ROOT -Name HKCR -ErrorAction SilentlyContinue | Out-Null
      }
      
      # Check registry
      $msxmlClsidPath = "HKCR:\CLSID\{2933BF90-7B36-11D2-B20E-00C04F983E60}\VersionList"
      if (Test-Path $msxmlClsidPath) {
        $versionEntries = Get-Item $msxmlClsidPath | Get-ChildItem | Where-Object { $_.PSChildName -like "{{ msxml_version }}*" }
        if ($versionEntries) {
          $msxmlFound = $true
          foreach ($entry in $versionEntries) {
            $properties = $entry | Get-ItemProperty
            $dllPath = $properties.'(default)' -replace '"', ''
            if (Test-Path $dllPath) {
              $foundPaths += $dllPath
            }
          }
        }
      }
      
      # Check standard locations
      foreach ($path in $msxmlPaths) {
        if (Test-Path $path) {
          $msxmlFound = $true
          $foundPaths += $path
        }
      }
      
      # Also check for related DLLs like msxml4r.dll
      $relatedDllPath = "$env:SystemRoot\System32\msxml$($CleanVersion)r.dll"
      $relatedDllPath64 = "$env:SystemRoot\SysWOW64\msxml$($CleanVersion)r.dll"
      
      if (Test-Path $relatedDllPath) {
        $foundPaths += $relatedDllPath
      }
      
      if (Test-Path $relatedDllPath64) {
        $foundPaths += $relatedDllPath64
      }
      
      # Output results as JSON for Ansible to parse
      $result = @{
        msxml_found = $msxmlFound
        found_paths = $foundPaths
      }
      
      ConvertTo-Json -InputObject $result
    dest: C:\Windows\Temp\check_msxml.ps1
  
- name: Check if specified MSXML version exists
  win_shell: C:\Windows\Temp\check_msxml.ps1
  register: msxml_check_result

- name: Set MSXML facts from check result
  set_fact:
    msxml_found: "{{ (msxml_check_result.stdout | from_json).msxml_found }}"
    msxml_paths: "{{ (msxml_check_result.stdout | from_json).found_paths }}"

- name: Display MSXML status
  debug:
    msg: "MSXML {{ msxml_version }} is {{ msxml_found | ternary('found', 'not found') }}{{ msxml_found | ternary(' at: ' + msxml_paths | join(', '), '') }}"

- name: Create PowerShell script for MSXML removal
  win_copy:
    content: |
      param (
        [Parameter(Mandatory=$true)]
        [string]$DllPath
      )
      
      $dllFileName = Split-Path $DllPath -Leaf
      $dllDirectory = Split-Path $DllPath -Parent
      
      try {
        # Change to the directory containing the DLL
        Push-Location $dllDirectory
        
        # Unregister the DLL
        $null = Start-Process -FilePath "regsvr32.exe" -ArgumentList "/u /s `"$dllFileName`"" -Wait -PassThru -NoNewWindow
        
        # Rename the DLL file (safer than deletion)
        Rename-Item -Path $dllFileName -NewName "$dllFileName.save" -Force -ErrorAction Stop
        
        # Return to previous directory
        Pop-Location
        
        Write-Output "{'success': true, 'path': '$DllPath'}"
      }
      catch {
        # Return to previous directory in case of error
        Pop-Location
        Write-Output "{'success': false, 'path': '$DllPath', 'error': '$($_.Exception.Message -replace "'", "''")'}}"
      }
    dest: C:\Windows\Temp\remove_msxml_dll.ps1
  when: msxml_found and msxml_remove | default(false) | bool

- name: Unregister and rename MSXML DLLs
  win_shell: C:\Windows\Temp\remove_msxml_dll.ps1 -DllPath "{{ item }}"
  register: msxml_removal_result
  loop: "{{ msxml_paths }}"
  when: msxml_found and msxml_remove | default(false) | bool

- name: Create PowerShell script for registry removal
  win_copy:
    content: |
      # Create HKCR drive if it doesn't exist
      if (-not (Get-PSDrive -Name HKCR -ErrorAction SilentlyContinue)) {
        New-PSDrive -PSProvider Registry -Root HKEY_CLASSES_ROOT -Name HKCR -ErrorAction SilentlyContinue | Out-Null
      }
      
      $msxmlClsidPath = "HKCR:\CLSID\{2933BF90-7B36-11D2-B20E-00C04F983E60}\VersionList"
      $CleanVersion = "{{ msxml_version }}".Split('.')[0]
      $removed = $false
      
      if (Test-Path $msxmlClsidPath) {
        $versionEntries = Get-Item $msxmlClsidPath | Get-ChildItem | Where-Object { $_.PSChildName -like "{{ msxml_version }}*" }
        if ($versionEntries) {
          foreach ($entry in $versionEntries) {
            try {
              Remove-Item -Path $entry.PSPath -Force -Recurse -ErrorAction Stop
              $removed = $true
            }
            catch {
              Write-Output "Error removing registry entry: $($_.Exception.Message)"
            }
          }
        }
      }
      
      Write-Output "{'registry_removed': $($removed.ToString().ToLower())}"
    dest: C:\Windows\Temp\remove_msxml_registry.ps1
  when: msxml_found and msxml_remove | default(false) | bool
      
- name: Remove registry entries if they exist
  win_shell: C:\Windows\Temp\remove_msxml_registry.ps1
  register: registry_removal_result
  when: msxml_found and msxml_remove | default(false) | bool
      
- name: Display removal results
  debug:
    msg: "MSXML {{ msxml_version }} removal completed. Check the logs for details."
  when: msxml_found and msxml_remove | default(false) | bool

# Cleanup temporary scripts
- name: Remove temporary PowerShell scripts
  win_file:
    path: "{{ item }}"
    state: absent
  loop:
    - C:\Windows\Temp\check_msxml.ps1
    - C:\Windows\Temp\remove_msxml_dll.ps1
    - C:\Windows\Temp\remove_msxml_registry.ps1
  when: cleanup_temp_files | default(true) | bool
  ignore_errors: yes