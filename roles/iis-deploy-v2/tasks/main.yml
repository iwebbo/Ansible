---
# tasks file for iis-deploy-v2
- name: Créer le répertoire de téléchargement temporaire
  win_file:
    path: "{{ deploy_temp_dir | default('C:\\temp\\deploy') }}"
    state: directory

- name: Télécharger le package depuis Artifactory
  win_get_url:
    url: "{{ artifactory_package_url }}"
    dest: "{{ deploy_temp_dir | default('C:\\temp\\deploy') }}\\{{ package_filename }}"
    username: "{{ artifactory_username | default('') }}"
    password: "{{ artifactory_password | default('') }}"
    force: "{{ force_download | default(true) }}"
    timeout: "{{ download_timeout | default(300) }}"
  register: download_result

- name: Vérifier que le téléchargement a réussi
  win_stat:
    path: "{{ deploy_temp_dir | default('C:\\temp\\deploy') }}\\{{ package_filename }}"
  register: package_file_stat

- name: Échec si le package n'existe pas
  fail:
    msg: "Le package {{ package_filename }} n'a pas été téléchargé correctement"
  when: not package_file_stat.stat.exists

- name: Arrêter le pool d'applications avant le déploiement
  win_iis_webapppool:
    name: "{{ app_pool_name }}"
    state: stopped
  when: app_pool_name is defined

- name: Arrêter le site web avant le déploiement
  win_iis_website:
    name: "{{ site_name }}"
    state: stopped
  when: site_name is defined

- name: Créer le répertoire de destination s'il n'existe pas
  win_file:
    path: "{{ deploy_destination_path }}"
    state: directory

- name: Sauvegarder la version précédente (optionnel)
  win_shell: |
    if (Test-Path "{{ deploy_destination_path }}") {
      $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
      $backupPath = "{{ backup_path | default('C:\\backup') }}\\{{ site_name | default('webapp') }}_$timestamp"
      New-Item -ItemType Directory -Path "{{ backup_path | default('C:\\backup') }}" -Force
      robocopy "{{ deploy_destination_path }}" "$backupPath" /E /R:3 /W:10
      Write-Output "Backup created at: $backupPath"
    }
  register: backup_result
  when: create_backup | default(true)

- name: Extraire le package (ZIP)
  win_unzip:
    src: "{{ deploy_temp_dir | default('C:\\temp\\deploy') }}\\{{ package_filename }}"
    dest: "{{ deploy_destination_path }}"
    delete_archive: "{{ delete_package_after_extract | default(false) }}"
  when: package_filename | regex_search('\\.zip$', ignorecase=true)

- name: Extraire le package (MSI) - Installation
  win_package:
    path: "{{ deploy_temp_dir | default('C:\\temp\\deploy') }}\\{{ package_filename }}"
    state: present
    arguments: "{{ msi_arguments | default('/quiet INSTALLDIR=\"' + deploy_destination_path + '\"') }}"
  when: package_filename | regex_search('\\.msi$', ignorecase=true)

- name: Copier les fichiers de configuration personnalisés
  win_copy:
    src: "{{ item.src }}"
    dest: "{{ deploy_destination_path }}\\{{ item.dest }}"
    backup: yes
  loop: "{{ config_files | default([]) }}"
  when: config_files is defined

- name: Appliquer les transformations de configuration
  win_shell: |
    $configPath = "{{ deploy_destination_path }}\\{{ item.file }}"
    if (Test-Path $configPath) {
      (Get-Content $configPath) -replace "{{ item.search }}", "{{ item.replace }}" | Set-Content $configPath
    }
  loop: "{{ config_transformations | default([]) }}"
  when: config_transformations is defined

- name: Créer le pool d'applications s'il n'existe pas
  win_iis_webapppool:
    name: "{{ app_pool_name }}"
    state: present
    attributes:
      processModel.identityType: "{{ app_pool_identity | default('ApplicationPoolIdentity') }}"
      processModel.userName: "{{ app_pool_username | default('') }}"
      processModel.password: "{{ app_pool_password | default('') }}"
      managedRuntimeVersion: "{{ dotnet_version | default('v4.0') }}"
      enable32BitAppOnWin64: "{{ enable_32bit | default(false) }}"
  when: app_pool_name is defined

- name: Créer ou mettre à jour le site web IIS
  win_iis_website:
    name: "{{ site_name }}"
    state: present
    port: "{{ site_port | default(80) }}"
    ip: "{{ site_ip | default('*') }}"
    hostname: "{{ site_hostname | default('') }}"
    physical_path: "{{ deploy_destination_path }}"
    application_pool: "{{ app_pool_name | default('DefaultAppPool') }}"
  when: site_name is defined

- name: Configurer les bindings SSL si spécifiés
  win_iis_webbinding:
    name: "{{ site_name }}"
    protocol: https
    port: "{{ item.port }}"
    ip: "{{ item.ip | default('*') }}"
    hostname: "{{ item.hostname }}"
    certificate_hash: "{{ item.cert_hash }}"
    certificate_store_name: "{{ item.cert_store | default('My') }}"
    state: present
  loop: "{{ ssl_bindings | default([]) }}"
  when: ssl_bindings is defined and site_name is defined

- name: Définir les permissions sur le répertoire
  win_acl:
    path: "{{ deploy_destination_path }}"
    user: "{{ item.user }}"
    rights: "{{ item.rights }}"
    type: "{{ item.type | default('allow') }}"
    state: present
  loop: "{{ directory_permissions | default([]) }}"
  when: directory_permissions is defined

- name: Démarrer le pool d'applications
  win_iis_webapppool:
    name: "{{ app_pool_name }}"
    state: started
  when: app_pool_name is defined

- name: Démarrer le site web
  win_iis_website:
    name: "{{ site_name }}"
    state: started
  when: site_name is defined

- name: Nettoyer les fichiers temporaires
  win_file:
    path: "{{ deploy_temp_dir | default('C:\\temp\\deploy') }}\\{{ package_filename }}"
    state: absent
  when: cleanup_temp_files | default(true)

- name: Vérifier que l'application répond
  win_uri:
    url: "http://{{ site_hostname | default('localhost') }}:{{ site_port | default(80) }}{{ health_check_path | default('/') }}"
    method: GET
    status_code: "{{ expected_status_code | default([200, 301, 302]) }}"
  register: health_check_result
  retries: "{{ health_check_retries | default(5) }}"
  delay: "{{ health_check_delay | default(30) }}"
  when: perform_health_check | default(true)

- name: Afficher le résultat du déploiement
  debug:
    msg: "Déploiement réussi - Application disponible sur {{ site_hostname | default('localhost') }}:{{ site_port | default(80) }}"
  when: health_check_result.status_code in (expected_status_code | default([200, 301, 302]))
