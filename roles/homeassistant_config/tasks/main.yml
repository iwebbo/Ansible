- name: Afficher les paramètres de déploiement
  debug:
    msg:
      - "Déploiement Home Assistant OS"
      - "Host: {{ inventory_hostname }}"
      - "Chemin config: {{ ha_config_path }}"
      - "Sauvegarde: {{ ha_backup_enabled }}"
      - "Fichiers à déployer: {{ ha_yaml_files | length }}"

- name: Vérifier que le répertoire de configuration existe
  stat:
    path: "{{ ha_config_path }}"
  register: config_dir_check

- name: Échouer si le répertoire de configuration n'existe pas
  fail:
    msg: "Le répertoire {{ ha_config_path }} n'existe pas. Vérifiez que Home Assistant OS est correctement installé."
  when: not config_dir_check.stat.exists

- name: Sauvegarder les fichiers existants
  copy:
    src: "{{ ha_config_path }}/{{ item }}"
    dest: "{{ ha_config_path }}/{{ item }}.backup.{{ ansible_date_time.epoch }}"
    remote_src: yes
    mode: '0644'
  with_items: "{{ ha_yaml_files }}"
  when: 
    - ha_backup_enabled
  ignore_errors: yes

- name: Nettoyer les anciens backups (garder seulement les 2 plus récents)
  shell: |
    cd {{ ha_config_path }}
    for file in {{ ha_yaml_files | join(' ') }}; do
      if ls ${file}.backup.* >/dev/null 2>&1; then
        echo "Nettoyage des backups pour ${file}..."
        ls -t ${file}.backup.* | tail -n +3 | xargs -r rm -f
        remaining=$(ls ${file}.backup.* 2>/dev/null | wc -l)
        echo "Backups restants pour ${file}: ${remaining}"
      fi
    done
  when: 
    - ha_backup_enabled
    - ha_cleanup_old_backups
  ignore_errors: yes

- name: Copier les fichiers YAML de configuration
  template:
    src: "{{ item }}.j2"
    dest: "{{ ha_config_path }}/{{ item }}"
    mode: '0644'
    backup: "{{ ha_backup_enabled }}"
  with_items: "{{ ha_yaml_files }}"
  register: config_files_updated
  notify: restart_homeassistant

- name: Forcer le redémarrage de Home Assistant si fichiers modifiés
  meta: flush_handlers
  when: config_files_updated.changed

- name: Attendre que Home Assistant redémarre
  wait_for:
    host: "{{ ha_host }}"
    port: "{{ ha_port }}"
    delay: "{{ ha_restart_delay }}"
    timeout: "{{ ha_restart_timeout }}"
  when: 
    - config_files_updated.changed
    - ha_wait_after_restart

- name: Vérifier que Home Assistant répond
  uri:
    url: "http://{{ ha_host }}:{{ ha_port }}"
    method: GET
    status_code: 200
    timeout: 10
  register: ha_health_check
  retries: 5
  delay: 10
  when: ha_verify_health

- name: Afficher le statut final
  debug:
    msg:
      - "Fichiers mis à jour: {{ config_files_updated.changed }}"
      - "Home Assistant accessible: {{ 'OK' if (ha_health_check.status | default(0)) == 200 else 'UNKNOWN' }}"
      - "URL: http://{{ ha_host }}:{{ ha_port }}"
