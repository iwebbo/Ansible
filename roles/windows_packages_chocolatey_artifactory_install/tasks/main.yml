---
# tasks file for windows_packages_chocolatey_artifactory_install
# Vérifier si Chocolatey est installé
- name: Check installation of Chocolatey
  win_stat:
    path: C:\ProgramData\chocolatey\choco.exe
  register: choco_stat

- name: Exit if chocolatey isn't present
  fail:
    msg: "{{ chocolatey_missing_message }}"
  when: not choco_stat.stat.exists

# Initialiser les variables pour éviter les erreurs undefined
- name: Initialize variables
  set_fact:
    choco_install: {"changed": false}
    choco_update: {"changed": false}

# Configuration de la source Chocolatey avec Artifactory
- name: Configure Chocolatey Artifactory source
  win_shell: |
    # Ajouter la nouvelle source
    choco source add -n="{{ artifactory_source_name | default('artifactory') }}" -s="{{ artifactory_url }}" -u="{{ artifactory_username }}" -p="{{ artifactory_password }}" --priority=1 --allow-self-service
    
    # Vérifier si la source a été ajoutée
    $success = choco source list -r | Where-Object { $_ -match "{{ artifactory_source_name | default('artifactory') }}" }
    if ($success) {
      Write-Output "SUCCESS"
    } else {
      Write-Output "FAILED"
    }
  register: source_config
  changed_when: "'SUCCESS' in source_config.stdout"
  failed_when: "'FAILED' in source_config.stdout"
  when: 
    - artifactory_url is defined and artifactory_url | length > 0
    - artifactory_username is defined and artifactory_username | length > 0
    - artifactory_password is defined and artifactory_password | length > 0

- name: Verify Artifactory source configuration
  debug:
    msg: "La source Artifactory {{ 'a été configurée avec succès' if source_config.changed else 'était déjà configurée' }}"
  when: 
    - artifactory_url is defined and artifactory_url | length > 0
    - artifactory_username is defined and artifactory_username | length > 0
    - artifactory_password is defined and artifactory_password | length > 0

# Vérification directe si le package est déjà installé via PowerShell
- name: Check if package is installed
  win_shell: |
    $packageInfo = choco list --local-only --exact {{ package_name }} -r
    if ($packageInfo) {
        $version = ($packageInfo -split '\|')[1]
        Write-Output "installed|$version"
    } else {
        Write-Output "not_installed|"
    }
  register: package_check
  changed_when: false
  when: package_name != ""

- name: Parse package info
  set_fact:
    package_status: "{{ package_check.stdout_lines[0].split('|')[0] }}"
    package_current_version: "{{ package_check.stdout_lines[0].split('|')[1] }}"
  when: package_name != ""

- name: Debug package check
  debug: 
    msg: "Package check: {{ package_name }} is {{ package_status }}, version: {{ package_current_version if package_current_version else 'N/A' }}"
  when: package_name != ""

- name: Show package status
  debug:
    msg: "Le package {{ package_name }} {{ 'est déjà installé en version ' + package_current_version if package_status == 'installed' else 'n''est pas installé' }}"
  when: package_name != ""

# Installation avec win_shell directement si win_chocolatey échoue
- name: Install {{ package_name }} using direct choco command
  win_shell: |
    # Déterminer la source à utiliser
    $source = "{{ artifactory_source_name | default('artifactory') if (artifactory_url is defined and artifactory_url != '') else (chocolatey_source | default('chocolatey')) }}"
    
    # Construire la commande
    $cmd = "choco install {{ package_name }} -y"
    {% if package_version is defined and package_version %}
    $cmd += " --version={{ package_version }}"
    {% endif %}
    $cmd += " --source=$source"
    {% if force_install | default(false) %}
    $cmd += " --force"
    {% endif %}
    $cmd += " --no-progress"
    $cmd += " --ignore-dependencies"
    
    # Afficher la commande
    Write-Output "EXECUTING: $cmd"
    
    # Exécuter la commande
    $output = Invoke-Expression $cmd 2>&1
    $exitCode = $LASTEXITCODE
    
    # Afficher la sortie
    Write-Output "OUTPUT_START"
    $output | ForEach-Object { Write-Output $_ }
    Write-Output "OUTPUT_END"
    
    # Vérifier le résultat
    if ($exitCode -eq 0) {
      if ($output -match "already installed") {
        Write-Output "STATUS: ALREADY_INSTALLED"
      } else {
        Write-Output "STATUS: INSTALLED"
      }
      exit 0
    } else {
      Write-Output "STATUS: FAILED"
      exit 1
    }
  register: install_result
  changed_when: "'STATUS: INSTALLED' in install_result.stdout"
  failed_when: "'STATUS: FAILED' in install_result.stdout"
  when: 
    - package_name != ""
    - package_status == "not_installed" or (package_state | default('present') == 'latest') or (force_install | default(false))

# Vérification après installation
- name: Verify installation status
  win_shell: |
    $installed = choco list --local-only --exact {{ package_name }} -r
    if ($installed) {
      $version = ($installed -split '\|')[1]
      Write-Output "installed|$version"
    } else {
      Write-Output "not_installed|"
    }
  register: verify_install
  changed_when: false
  when: 
    - package_name != "" 
    - install_result is defined
    - install_result.changed

- name: Debug installation result
  debug:
    msg: |
      Installation result:
      {{ install_result.stdout if install_result is defined else 'No installation performed' }}
  when: 
    - package_name != "" 
    - install_result is defined
    - install_result.changed

- name: Status of the installation
  debug:
    msg: >-
      {{ package_name }} 
      {% if 'STATUS: ALREADY_INSTALLED' in (install_result.stdout | default('')) %}
        était déjà installé
      {% elif 'STATUS: INSTALLED' in (install_result.stdout | default('')) %}
        a été installé avec succès
        {% if verify_install is defined and 'installed|' in verify_install.stdout %}
        (version {{ verify_install.stdout.split('|')[1] }})
        {% endif %}
      {% elif package_status == 'installed' %}
        est déjà installé en version {{ package_current_version }}
      {% else %}
        statut d'installation inconnu
      {% endif %}
  when: package_name != ""