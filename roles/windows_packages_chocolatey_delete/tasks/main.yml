---
# tasks file for windows_package_chocolatey_delete
- name: Check installation of Chocolatey
  win_stat:
    path: C:\ProgramData\chocolatey\choco.exe
  register: choco_stat

- name: Exit if chocolatey isn't present
  fail:
    msg: "{{ chocolatey_missing_message }}"
  when: not choco_stat.stat.exists

# Alternative à win_chocolatey_facts en utilisant PowerShell
- name: Get Chocolatey packages with PowerShell
  win_shell: |
    $packages = choco list --local-only --limit-output | ForEach-Object {
      $parts = $_ -split '\|'
      if ($parts.Count -ge 2) {
        @{
          name = $parts[0]
          version = $parts[1]
        }
      }
    }
    ConvertTo-Json -InputObject $packages -Compress
  register: chocolatey_packages_result
  changed_when: false

- name: Parse Chocolatey packages JSON
  set_fact:
    chocolatey_facts:
      ansible_facts:
        packages: "{{ chocolatey_packages_result.stdout | from_json }}"

- name: Debug
  debug:
    var: chocolatey_facts.ansible_facts.packages
    verbosity: 1

- name: Check if already installed
  set_fact:
    package_installed: >-
      {% if chocolatey_facts.ansible_facts.packages is defined %}
        {% set found = false %}
        {% for pkg in chocolatey_facts.ansible_facts.packages %}
          {% if pkg.name is defined and pkg.name|lower == package_name|lower %}
            {% set found = true %}
          {% endif %}
        {% endfor %}
        {{ found }}
      {% else %}
        false
      {% endif %}
    package_current_version: >-
      {% if chocolatey_facts.ansible_facts.packages is defined %}
        {% set version = '' %}
        {% for pkg in chocolatey_facts.ansible_facts.packages %}
          {% if pkg.name is defined and pkg.name|lower == package_name|lower %}
            {% set version = pkg.version if pkg.version is defined else '' %}
          {% endif %}
        {% endfor %}
        {{ version }}
      {% else %}
        ''
      {% endif %}
  when: package_name != ""

- name: Show package status
  debug:
    msg: "Le package {{ package_name }} {{ 'est déjà installé en version ' + package_current_version if package_installed else 'n''est pas installé' }}"
  when: package_name != ""

- name: Uninstall package {{ package_name }} from win_chocolatey
  win_chocolatey:
    name: "{{ package_name }}"
    state: absent
    version: "{{ package_version | default(omit) }}"
    force: "{{ force_uninstall }}"
    remove_dependencies: "{{ remove_dependencies }}"
    timeout: "{{ chocolatey_timeout }}"
  register: choco_uninstall_result
  when: 
    - package_name != ""
    - package_installed
  ignore_errors: true

- name: Uninstall package {{ package_name }} from win_command if win_chocolatey failed
  win_command: |
    choco uninstall {{ package_name }} -y --remove-dependencies={{ remove_dependencies | ternary('true', 'false') }} {{ '--version=' + package_version if package_version else '' }} {{ '--force' if force_uninstall else '' }} {{ '--all-versions' if remove_all_versions else '' }}
  register: choco_uninstall_command
  when: 
    - package_name != ""
    - package_installed
    - choco_uninstall_result is failed or choco_uninstall_result.failed | default(false)

# Alternative à win_chocolatey_facts pour vérifier après désinstallation
- name: Check status package after uninstall
  win_shell: |
    $packages = choco list --local-only --limit-output | ForEach-Object {
      $parts = $_ -split '\|'
      if ($parts.Count -ge 2) {
        @{
          name = $parts[0]
          version = $parts[1]
        }
      }
    }
    ConvertTo-Json -InputObject $packages -Compress
  register: post_chocolatey_packages_result
  changed_when: false
  when: 
    - package_name != ""
    - package_installed

- name: Parse post-uninstall Chocolatey packages JSON
  set_fact:
    post_chocolatey_facts:
      ansible_facts:
        packages: "{{ post_chocolatey_packages_result.stdout | default('[]') | from_json }}"
  when: 
    - package_name != ""
    - package_installed

- name: Check/confirm uninstall
  set_fact:
    still_installed: >-
      {% set found = false %}
      {% if post_chocolatey_facts.ansible_facts.packages is defined %}
        {% for pkg in post_chocolatey_facts.ansible_facts.packages %}
          {% if pkg.name|lower == package_name|lower %}
            {% set found = true %}
          {% endif %}
        {% endfor %}
      {% endif %}
      {{ found }}
  when: 
    - package_name != ""
    - package_installed

- name: Uninstall view
  debug:
    msg: "{{ package_name }} {{ 'a été désinstallé avec succès' if not still_installed else 'est toujours installé - la désinstallation a échoué' }}"
  when: 
    - package_name != ""
    - package_installed

- name: Clean-up if needed (ex Python,Perl,Dotnet)
  block:
    - name: Check path folder
      win_shell: |
        try {
          $pythonInstallPath = (Get-Command python -ErrorAction SilentlyContinue).Source
          if ($pythonInstallPath) {
            $installDir = Split-Path -Path $pythonInstallPath -Parent
            Write-Output $installDir
          } 
        } catch {
          Write-Output ""
        }
      register: python_install_path
      failed_when: false
      changed_when: false

    - name: Delete folder 
      win_file:
        path: "{{ python_install_path.stdout_lines[0] }}"
        state: absent
      when: 
        - python_install_path.stdout_lines | length > 0
        - python_install_path.stdout_lines[0] | length > 0
        - not still_installed
  when:
    - package_name == "python" or package_name == "python3" or package_name.startswith("python3")
    - package_installed
    - not still_installed